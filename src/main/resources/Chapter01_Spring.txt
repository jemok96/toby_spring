제어의 역전(IOC): 프로그램의 제어 프름 구조가 뒤바뀐것
보통의 프로그램은 자신이 어떤 오브젝트를 사용할지 결정하고, 생성해서
필요한 시점에 능동적으로 사용한다. 하지만 IOC가 적용된 상태에서는
오브젝트가 자신이 사용할 오브젝트를 스스로 선택하지도 않고, 생성하지도 않는다.

스프링에서는 빈의 생성과 관계설정 같은 제어를 담당하는 IOC 오브젝트를 "빈 팩토리"라고 부른다
스프링 빈 : 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트를 가리키는 말

ApplicationContext는 BeanFactory의 구현체
BeanFactory, ApplicationContext => IOC 컨테이너 또는 컨테이너
스프링 컨테이너 = ApplicationContext

동일성 : ==   (완전 동일)
동등성 : equals  (동일한 정보를 담고 있음)


싱글톤 방식은 생성자가 private인데 스프링 컨테이너의 싱글톤 방식은 public 생성자를 가질 수 있음
private ConnectionMaker connectionMaker; 이처럼 읽기 전용 값을 인스턴스 변수로 사용하는 것은 괜찮은데
멀티스레드 환경에서 계속 값이 변하는 User 객체같은건 지역변수로 사용하는게 좋음

오브젝트는 다른 오브젝트에 주입할 수 있는게 아니라 오브젝트의 레퍼런스가 전달될 뿐이다.